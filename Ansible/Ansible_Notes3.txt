Ansible Tags:


| **Concept**                   | **Example / Usage**                                                             | **Notes**                                |
| ----------------------------- | ------------------------------------------------------------------------------- | ---------------------------------------- |
| **Tag a task**                | `yaml - name: Install Apache apt: name=apache2 state=present tags: webserver`   | Use to run specific tasks selectively    |
| **Tag multiple tasks**        | `yaml - name: Install PHP apt: name=php state=present tags: [webserver, php]`   | Multiple tags in a list                  |
| **Tag a play**                | `yaml - hosts: all tags: always`                                                | Tags applied to all tasks in the play    |
| **Run tagged tasks**          | `bash ansible-playbook playbook.yml --tags "webserver"`                         | Only tasks with `webserver` tag will run |
| **Skip tagged tasks**         | `bash ansible-playbook playbook.yml --skip-tags "database"`                     | Skip tasks with `database` tag           |
| **Special tag: always**       | `yaml tags: always`                                                             | Runs even if other tags are specified    |
| **Special tag: never**        | `yaml tags: never`                                                              | Never runs with `--tags`                 |
| **Mixing tags and skip-tags** | `bash ansible-playbook playbook.yml --tags "webserver,setup" --skip-tags "php"` | Run multiple tags while skipping some    |
--------------------------------------------------------------------------------------------------------------------------------------------------------------


Ansible Variables – Short Notes

Definition:
Variables in Ansible store values that can be reused in playbooks, templates, and roles. They make playbooks dynamic and flexible.

Types of Variables:
Playbook / Task Variables – Defined in the vars: section of a play or task.
Host Variables – Defined in inventory files or host_vars/ folder.
Group Variables – Defined in group_vars/ folder.
Facts Variables – Automatically gathered from hosts (ansible_facts).
Extra Variables – Passed at runtime with -e.
Registered Variables – Store output of a task for later use.

-------------------------------------------------------------------------
Playbook Variables

- hosts: all
  vars:
    apache_port: 80
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: present

    - name: Start Apache service
      service:
        name: apache2
        state: started
      notify:
        - restart apache

  handlers:
    - name: restart apache
      service:
        name: apache2
        state: restarted

------------------------------------------------------------------------

Host Variables (inventory)

[web]
web1 ansible_host=192.168.1.10 apache_port=8080

----------------------------------------------------------------------

Extra Variables

ansible-playbook playbook.yml -e "apache_port=8081"

---------------------------------------------------------------------

Registered Variables

- name: Check Apache status
  command: systemctl status apache2
  register: apache_status

- name: Show Apache status
  debug:
    var: apache_status.stdout
----------------------------------------------------------------------

Ansible Variables Cheatsheet

| **Variable Type**        | **Definition / Example**                          |
| ------------------------ | ------------------------------------------------- |
| **Playbook / Task vars** | Defined in `vars:` section inside playbook        |
| **Host vars**            | Defined in inventory or `host_vars/host.yml`      |
| **Group vars**           | Defined in `group_vars/group.yml`                 |
| **Facts variables**      | Auto-gathered (`ansible_facts`)                   |
| **Extra vars**           | Passed via CLI `-e "var=value"`                   |
| **Registered vars**      | Store task output for reuse (`register: varname`) |
| **Default / set\_fact**  | `set_fact: var=value` to define dynamically       |
--------------------------------------------------------------------------------

Accessing Variables in Templates or Tasks

- debug:
    msg: "Apache is running on port {{ apache_port }}"
---------------------------------------------------------------------

Priority Order (Highest → Lowest)

extra vars > task vars > play vars > host vars > group vars > defaults




