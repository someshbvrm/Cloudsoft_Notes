Install conditionally Apache HTTP Server (httpd) on Debian and RedHat systems using Ansible Playbook

---
- name: Install httpd based on OS distribution
  hosts: your_target_hosts
  become: yes  # This allows the playbook to run with elevated privileges

  tasks:
    - name: Install httpd on Debian-based systems
      apt:
        name: apache2
        state: present
      when: ansible_os_family == 'Ubuntu'

    - name: Install httpd on RedHat-based systems
      yum:
        name: httpd
        state: present
      when: ansible_os_family == 'RedHat'

üìùHere playbook gathers the facts of all hosts during execution and based on condition it runs the task.

-------------------------------------------------------------------------------------------------------


Installing multiple packages 

---
- name: Install Packages
  hosts: your_target_hosts
  become: yes

  tasks:
    - name: Install multiple packages
      package:
        name:
          - package1
          - package2
          - package3
        state: present

------------------------------------------------------------------------------------------------------

Installing packages in loop

- name: Install packages using a loop
  hosts: your_target_hosts
  become: true
  tasks:
    - name: Install packages
      package:
        name: "{{ item }}"			#{{ item }} loads package1, package2 sequentially
        state: present
      loop:
        - package1
        - package2
        - package3
        # Add more package names as needed


We are using ansible for continuous deployment. Infrastructure we are provisioning through terraform.  Once we got the infrastructure we are going to deploy our applications through ansible.

Example 

Front end : httpd/nginx
backend   : tomcat
Database  : MySQL/NoSQL
Message queues: RabbitMQ

---------------------------------------------------------------------------

Installing tomcat server and deploying war file also


	***
---
- name: Install Tomcat and deploy WAR
  hosts: tomcatservers
  become: yes

  tasks:
    - name: Install Java
      apt:
        name: openjdk-8-jdk
        state: present

    - name: Download and Extract Tomcat
      unarchive:
        src: http://mirror.apache-htttp.ojg/tomcat/tomcat-9/v9.0.54/bin/apache-tomcat-9.0.54.tar.gz
        dest: /opt
        remote_src: yes
      when: ansible_os_family == "Debian"

    - name: Start Tomcat Service
      systemd:
        name: tomcat
        enabled: yes
        state: started

    - name: Deploy WAR File
      copy:
        src: /path/to/your_app.war
        dest: /opt/apache-tomcat-9.0.54/webapps/

    - name: Restart Tomcat Service
      systemd:
        name: tomcat
        state: restarted


üìñhttps://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tags.html

If you want to run specific tasks then use --tags

ansible-playbook example.yaml --tags "configurations,packages"

------------------------------------------------------------------------------------

If playbook has sensitive details like passwords, keys, cetificates or If we want to encrypt your playbooks we need to use vaults

ansible-vaults

ansible-vault encrypt foo.yaml bar.yaml, baz.yaml
ansible-vault decrypt foo.yaml bar.yaml, baz.yaml

---------------------------------------------------------

Implementing host variables in inventory file

[webservers]
webserver001.wipro.com http_port=8080
webserver002.wipro.com http_port=8081
webserver003.wipro.com http_port=8082

and we use {{ http_port }} for variable parsing in the ansible-playbook where http_port is a variable declared

We can give host group variables to host groups

[texas:vars]
host1
host2

[atlanta:vars]
ntp_server=ntp.texas.example.com
proxy=proxy.texas.example.com

-------------------------------------------------------------------------

---
- name: Download Tomcat8 from tomcat.apache.org
  hosts: testserver
  vars:
    download_url: https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.83/bin/apache-tomcat-8.5.83.tar.gz
  tasks:
   - name: Download Open JDK
     become: yes
     apt:
      name: openjdk-8-jre-headless
      update_cache: yes
      state: present
  
   - name: validate if Java is availble 
     shell: 
      java -version
     
   - name: Create the group
     become: yes
     group: 
      name: tomcat
      state: present

   - name: Create the user
     become: yes
     user:
        name: tomcat
        state: present

   - name: Create a Directory /opt/tomcat8
     become: yes
     file:
       path: /opt/tomcat8
       state: directory
       mode: 0755
       owner: tomcat
       group: tomcat

   - name: Download Tomcat using unarchive
     become: yes
     unarchive:
       src: "{{download_url}}"
       dest: /opt/tomcat8
       mode: 0755
       remote_src: yes
       group: tomcat
       owner: tomcat
    
   - name: Move files to the /opt/tomcat8 directory
     become: yes
     become_user: tomcat
     shell: "mv /opt/tomcat8/apache*/* /opt/tomcat8"

   - name: Creating a service file
     become: yes
     copy: 
      content: |-
        [Unit]
        Description=Tomcat Service
        Requires=network.target
        After=network.target

        [Service]
        Type=forking
        User=tomcat
        Environment="CATALINA_PID=/opt/tomcat8/logs/tomcat.pid"
        Environment="CATALINA_BASE=/opt/tomcat8"
        Environment="CATALINA_HOME=/opt/tomcat8"
        Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

        ExecStart=/opt/tomcat8/bin/startup.sh
        ExecStop=/opt/tomcat8/bin/shutdown.sh
        Restart=on-abnormal

        [Install]
        WantedBy=multi-user.target
      dest: /etc/systemd/system/tomcat.service

   - name: Reload the SystemD to re-read configurations
     become: yes
     systemd:
        daemon-reload: yes

   - name: Enable the tomcat service and start
     become: yes
     systemd:
        name: tomcat
        enabled: yes
        state: started

   - name: Connect to Tomcat server on port 8080 and check status 200 - Try 5 times
     tags: test
     uri:
       url: http://localhost:8080
     register: result
     until: "result.status == 200"
     retries: 5
     delay: 10

-----------------------------------------------------------------------------------

Defining variables in included files and roles
You can define variables in reusable variables files and/or in reusable roles. When you define variables in reusable variable files, the sensitive variables are separated from playbooks. This separation enables you to store your playbooks in source control software and even share the playbooks without the risk of exposing passwords or other sensitive and personal data. For information about creating reusable files and roles, see Re-using Ansible artifacts.

This example shows how you can include variables defined in an external file:

---
- hosts: all  
  remote_user: root  
  vars:  
    favcolor: blue  
  vars_files:  
    - /vars/external_vars.yml  

  tasks:  
    - name: This is just a placeholder  
      ansible.builtin.command: /bin/echo foo


We can pass variables during execution

ansible-playbook release.yml --extra-vars "version=1.23.45 other_variable=foo"  
ansible-playbook tomcat.yml -e "http_port=8983"

-------------------------------------------------------------------------------------------
There is variable precedence we nee to follow the order

Understanding variable precedence

Ansible does apply variable precedence, and you might have a use for it. Here is the order of precedence from least to greatest (the last listed variables override all other variables):

        Command-line values (for example, -u my_user, these are not variables)

        Role defaults (as defined in Role directory structure) 1

        Inventory file or script group vars 2

        Inventory group_vars/all 3

        Playbook group_vars/all 3

        Inventory group_vars/* 3

        Playbook group_vars/* 3

        Inventory file or script host vars 2

        Inventory host_vars/* 3

        Playbook host_vars/* 3

        Host facts and cached set_facts 4

        Play vars

        Play vars_prompt

        Play vars_files

        Role vars (as defined in Role directory structure)

        Block vars (for tasks in block only)

        Task vars (for the task only)

        include_vars

        Registered vars and set_facts

        Role (and include_role) params

        include params

        Extra vars (for example, -e "user=my_user")(always win precedence)

--------------------------------------------------------------------------------------


What is a Role?

    A pre-defined directory structure for organizing playbooks, variables, tasks, handlers, files, and templates

    Modular approach to break complex playbooks into reusable components

    Promotes code reusability and sharing across projects

Role Directory Structure

role_name/
‚îú‚îÄ‚îÄ defaults/          # Lowest priority variables
‚îÇ   ‚îî‚îÄ‚îÄ main.yml
‚îú‚îÄ‚îÄ vars/             # Higher priority variables
‚îÇ   ‚îî‚îÄ‚îÄ main.yml
‚îú‚îÄ‚îÄ tasks/            # Main tasks
‚îÇ   ‚îî‚îÄ‚îÄ main.yml
‚îú‚îÄ‚îÄ handlers/         # Handlers
‚îÇ   ‚îî‚îÄ‚îÄ main.yml
‚îú‚îÄ‚îÄ templates/        # Jinja2 templates
‚îú‚îÄ‚îÄ files/           # Static files
‚îú‚îÄ‚îÄ meta/            # Role dependencies
‚îÇ   ‚îî‚îÄ‚îÄ main.yml
‚îî‚îÄ‚îÄ tests/           # Test playbooks


In playbook-

- hosts: webservers
  roles:
    - common
    - { role: nginx, port: 80 }
    - { role: app_server, when: "env == 'prod'" }

In commandline

ansible-galaxy role init my_role  # Create new role
ansible-galaxy install zaxos.tomcat-ansible-role  # Install from Galaxy

---
- hosts: tomcatservers  
  become: true  
  vars:  
    tomcat_version: 8.5.23  
    tomcat_permissions_production: true  
    tomcat_users:  
      - username: "tomcat"  
        password: "t3mpp@ssw0rd"  
        roles: "tomcat,admin,manager,manager-gui"  
      - username: "exampleuser"  
        password: "us3rp@ssw0rd"  
        roles: "tomcat"  
    
  roles:  
    - role: zaxos.tomcat-ansible-role  
    - role: nginx-role

-----------------------------------------------------------

Examaple from GitHub

https://github.com/ansible/ansible-examples/tree/master/lamp_simple

---
# This playbook deploys the whole application stack in this site.

- name: apply common configuration to all nodes
  hosts: all
  remote_user: root

  roles:
    - common

- name: configure and deploy the webservers and application code
  hosts: webservers
  remote_user: root

  roles:
    - web

- name: deploy MySQL and configure the databases
  hosts: dbservers
  remote_user: root

  roles:
    - db

------------------------------------------------------------------

Ansible Playbook: Deploy Standalone Tomcat 7 Server

---
- name: Deploy standalone Tomcat 7 server
  hosts: tomcat-servers
  remote_user: ubuntu
  become: yes
  become_method: sudo

  roles:
    - role: selinux
    - role: tomcat

------------------------------------------------------

We use ansible for
Linux patching
hardening of Linux servers
to install Kubernetes using the role 'kubespray' #as of now we are using eks which is managed or provisioned by terraform

Hardening Linux servers: (usually we do in weekends)
Patching
Updates
Delete unnecessary files and folders, users
Restrict unnecessary privileges
stop unnecessary services

----------------------------------------------------

Complete playbook for hardening the Linux

---
- name: Linux hardening
  hosts: linux_servers
  gather_facts: yes

  tasks:
    - name: Ensure firewall package is installed
      ansible.builtin.dnf:
        name: firewalld
        state: present

    - name: Ensure firewall service is up and running
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: yes

    - name: Block non-required services
      ansible.posix.firewalld:
        service: "{{ item }}"
        state: disabled
        permanent: yes
        immediate: yes
      loop:
        - cockpit
        - dhcpv6-client

    - name: Enable required services
      ansible.posix.firewalld:
        service: "ssh"
        state: enabled
        permanent: yes
        immediate: yes

    - name: Ensure SELinux is enabled and enforcing
      ansible.posix.selinux:
        policy: targeted
        state: enforcing
      register: selinux_status

    - name: Verify if reboot needed
      ansible.builtin.debug:
        msg: "Reboot needed: {{ selinux_status.reboot_required }}"
      changed_when: "{{ selinux_status.reboot_required | bool }}"
      notify: reboot_host

    - name: Harden kernel parameters
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/90-kernel.conf
      loop:
      - name: kernel.randomize_va_space
        value: 2
      - name: kernel.dmesg_restrict
        value: 1
      - name: kernel.perf_event_paranoid
        value: 2

    - name: Harden network parameters
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/90-net.conf
      loop:
       - name: net.ipv4.tcp_syncookies
         value: 1
       - name: net.ipv4.conf.default.log_martians
         value: 1
       - name: net.ipv4.conf.all.log_martians
         value: 1
       - name: net.ipv4.conf.all.accept_source_route
         value: 0
       - name: net.ipv4.conf.default.accept_source_route
         value: 0
       - name: net.ipv6.conf.all.accept_source_route
         value: 0
       - name: net.ipv6.conf.default.accept_source_route
         value: 0

    - name: Disable ip forwarding
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/90-ip.conf
      loop:
      - name: net.ipv4.ip_forward
        value: 0
      - name: net.ipv6.conf.all.forwarding
        value: 0

    - name: Disable ICMP echo and redirects
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/90-icmp.conf
      loop:
      - name: net.ipv4.icmp_echo_ignore_broadcasts
        value: 1
      - name: net.ipv4.icmp_echo_ignore_all
        value: 1
      - name: net.ipv4.conf.default.accept_redirects
        value: 0
      - name: net.ipv4.conf.all.accept_redirects
        value: 0
      - name: net.ipv6.conf.all.accept_redirects
        value: 0
      - name: net.ipv6.conf.default.accept_redirects
        value: 0
      - name: net.ipv4.conf.default.send_redirects
        value: 0
      - name: net.ipv4.conf.all.send_redirects
        value: 0

    - name: Ensure audit package is installed
      ansible.builtin.dnf:
        name: audit
        state: present

    - name: Ensure auditd service is up and running
      ansible.builtin.service:
        name: auditd
        state: started
        enabled: yes

    - name: Add a basic audit config
      ansible.builtin.copy:
        src: audit.rules
        dest: /etc/audit/rules.d/audit.rules
        owner: root
        group: root
        mode: 0600
      notify: reboot_host

  handlers:
    - name: reboot_host
      ansible.builtin.reboot:
        reboot_timeout: 360

------------------------------------------------------------


