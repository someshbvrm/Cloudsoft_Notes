What is a Namespace?

A namespace is a Kubernetes feature used to divide cluster resources between multiple users or teams, providing isolation for resources like pods, services, and deployments within the same cluster.

Default namespaces:

default → Where objects are created if no namespace is specified.
kube-system → Contains system components (API server, DNS, etc.).
kube-public → Publicly readable data (e.g., cluster info).
kube-node-lease → Stores node heartbeat info.



Creating namespaces

kubectl create namespace item-dev
kubectl create namespace item-prod
kubectl create namespace item-qa

Lists all namespaces in the cluster with their status
kubectl get namespace

Creates or updates a namespace using a YAML file
kubectl create -f mynamespace.yaml

namespace.yaml

```
apiVersion: v1
kind: Namespace
metadata:
  name: dev

kubectl apply -f mynamespace.yaml


Delete a namespace
kubectl delete namespace dev
kubectl delete -f mynamespace.yaml

Kubectl run nginx --image=nginx		#Creates and runs nginx pod in default namespace

kubectl run nginx --image=nginx --namespace=itcm-dev	#To create a pod in specific namespace

kubectl get pods		#Displays list of pods running in default workspace

kubecrl get pods --namespace=itcm-qa	@Displays list of pods running in specific workspace


------------------------------------------------------------

Pod Example - simple-pod.yaml

---------------------------------------------------------

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80



Or Create using command

kubectl run nginx-pod --image=nginx:1.14.2

---------------------------------------------------------

Pods in a Kubernetes cluster are used in two main ways:

    Pods that run a single container. The "one-container-per-Pod" model is the most common Kubernetes use case; in this case, you can think of a Pod as a wrapper around a single container; Kubernetes manages Pods rather than managing the containers directly.

    Pods that run multiple containers that need to work together. A Pod can encapsulate an application composed of multiple co-located containers that are tightly coupled and need to share resources. These co-located containers form a single cohesive unit of service—for example, one container serving data stored in a shared volume to the public, while a separate sidecar container refreshes or updates those files. The Pod wraps these containers, storage resources, and an ephemeral network identity together as a single unit.

--------------------------------------------------------

Pod with multiple containers
-----------------------------------------------------

apiVersion: v1
kind: Pod
metadata:
  name: multi-container-pod
  namespace: dev
spec:
  containers:
  - name: nginx-container
    image: nginx:latest
    ports:
    - containerPort: 80
  - name: busybox-container
    image: busybox:latest
    command: ["sh", "-c", "while true; do echo Hello from BusyBox; sleep 5; done"]

