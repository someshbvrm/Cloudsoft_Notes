Building the docker image

Syntax: docker build --tag imagename:tagname
docker build -t tomcat:1

Building the docker image from container
docker commit mycontainer myimage:1

Creating container from the built image
docker run --name mycontainer1 -p 8081:8080 -d myimage:1

docker commit mycontainer1 myimage:2

Note: docker commit ignores volumes and data in it.

Create Amazon Elastic Container Registry (ECR) to push the builds to public or private registry
Create dockerhub to push the builds to public or private registry

--------------------------------------------------------------------------------------------------

Dockerfile Hands-on to build image
----------------------------------------------------

sudo apt update
sudo apt install docker.io
sudo service docker start
sudo systemctl enable docker
sudo usermod -aG docker ubuntu

Restart the session

docker info	#checking docker is running or not

mkdir tomcat	#Creating directory to store dockerfile
cd tomcat
vi Dockerfile

-------------------------------------------------------

FROM tomcat:latest
LABEL maintainer="info@cloudsoftsol.com"

# Copy your WAR file into the Tomcat webapps directory
COPY jenkins.war /usr/local/tomcat/webapps/

# Expose Tomcat's default HTTP port
EXPOSE 8080

# Start Tomcat
CMD ["catalina.sh", "run"]

--------------------------------------------------------

#Download the Jenkins.war to current directory /tomcat/
wget https://updates.jenkins.io/download/war/2.523/jenkins.war


docker build -t mytomcat:1 .	#Jenkins.war is in current directory indicating the dot.

#Note - It first downloads the tomcat latest image
	On top of that it adds the layers

--------------------------------------------------

mytomcat:1 image is created

docker images	#Check for the images
	We have two images 1.tomcat 2.mytomcat:1

-----------------------------------------------------------


Local name is mytomcat:1
Dockerhub repo name is someshbvrm/mytomcatjenkins	

Note: the repo is created as private. So to pull or push the image, dockerhub authentication is needed.

In order to push to dockerhub, image should have dockerhub name tag also

We can add the dockerhub tag to the local image
docker tag mytomcat:1 someshbvrm/mytomcatjenkins:1	#We need to include username (someshbvrm) as fully qualified name

sudo docker images

We have three images 1.tomcat 2.mytomcat:1 3.someshbvrm/mytomcatjenkins:1
--------------------------------------------------------------
Login to dockerhub
docker login	# this command asks to enter username and password


Now push the image to the repo
docker push <dockerhub-repo>:tagname

docker push someshbvrm/mytomcatjenkins:1
--------------------------------------------------------------
If you need to push another build

docker build -t mytomcat:2
docker tag mytomcat:2 someshbvrm/mytomcatjenkins:2
docker push someshbvrm/mytomcatjenkins:2


----<><><>----Interactive Tutorials --> katacoda.com ----<><><>----



