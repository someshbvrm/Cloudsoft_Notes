üìå"Integrating SonarQube with Jenkins for performing static code analysis on the generated build."

-----------------------------------------------------------------------------
üöÄInstalling SonarQube

Update and Upgrade Ubuntu
	sudo apt update
	sudo apt upgrade -y


Install jdk 17 	#jdk21 is not yet supported
	sudo apt install openjdk-17-jdk -y


Intall wget & unzip
	sudo apt install wget unzip -y

create SonarQube user
	sudo su
	sudo adduser sonarqube
	sudo usermod -aG sudo sonarqube
	su SonarQube	#No need to use sudo from now
	cd ~
	pwd #to check whether you are in /home/sonarqube/


Download sonarqube
	wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-25.8.0.112029.zip

unzip sonarqube-25.8.0.112029.zip
	mv sonarqube-25.8.0.112029 sonarqube	#For convenience I am renaming the folder
	chown -R sonarqube:sonarqube /home/sonarqube/sonarqube   #Usually sonarqube-25.8.0.112029 folder if not renamed
	chmod -R 775 /home/sonarqube/sonarqube 
	cd /home/sonarqube/sonarqube/bin/linux-x86-64
	./sonar.sh start    [or] sudo -u sonarqube ./sonar.sh start

üí°SonarQube listens on 9000 port

To check whether sonarqube is running or not
	curl localhost:9000	#In terminal
	http://<YOUR_EC2_PUBLIC_IP>:9000	#In browser

Default credentials
username - admin
password - admin

Go to Myaccount - security tab and generate token
Generate a token - jenkins-project-token	#This token should used in Jenkins server for connectivity
----------------------------------------------------------------------------------------

Install "SonarQube Scanner" in Jenkins Tools

Create Credentials
Goto Credentials-System-Global credentials - add credentials
	Kind - Secret text
	Secret - Past the generated token from sonarqube server
	Id - sonar

Go to System and search sonarqube
add SonarQube server
	Name - SonarQubeServer
	Server URL - public-ip:9000 
	Server Authentication token - sonar

Save and apply

----------------------------------------------------------

Create project manually
	Project display name - jenkinsdemo
	Project key - jenkinsdemo
	setup
	locally

Use existing token and continue and select maven and copy the script

---------------------------------------------------------
In Jenkins Server

Paste the script in GitHub + Maven example script pipeline

sh "paste the script"
remember replace M3 with your maven installation label

---------------------------------------------------------

pipeline {
    agent any

    tools {
        // Use Maven installed in Jenkins (configured as "maven3911")
        maven "maven3911"
    }

    stages {
        stage('Build') {
            steps {
		cleanWs()
                // Clone source code from GitHub
                git 'https://github.com/jglick/simple-maven-project-with-tests.git'

                // Run Maven build (ignore test failures but build the jar)
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage('SonarQube analysis') {
            steps {
                // Use SonarQube environment configured in Jenkins (name = SonarQubeServer)
                withSonarQubeEnv('SonarQubeServer') {
                    withCredentials([string(credentialsId: 'sonarqubecredentials', variable: 'SONAR_TOKEN')]) {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.ws.timeout=60'
                    }
                }
            }
        }
    }

    post {
        success {
            // Archive the built jar file
            archiveArtifacts 'target/*.jar'
        }
    }
}



üìùHere SonarQubeServer is the name of server configured in System-SonarServer
  sonarqubecredentials is the name of credential configured in Credentials-system-globalcredentials-secretkey


